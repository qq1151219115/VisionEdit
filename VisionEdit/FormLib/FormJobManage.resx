<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANuVEQrblRFq25YSftuWEn7blhJ+25YSftuW
        En7blhJ+25YSftuWEn7blhJ+2pURaNqVEQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA25URsduWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25URsQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        EgoAAAAA25YSftqVEoEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA25URCtuW
        EWzalRH325UShduWEn7blhK/25USv9qVEWjalREKAAAAAAAAAAAAAAAA25URCtuVEWrblhJ+25YSftuW
        En7blhJ+25YSftuWEn7blhJ+25YSftuWEn7alRFo2pURCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADblRGx25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uVEbEAAAAAAAAAAAAAAADblRGx25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blRGxAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA25IQBNuVEffblRH725YRg9uWEn7blhJ+25YSftuWEoXalRL525YR+9uTEAjbkxAI2pMQDNuV
        EffblRH725YRg9uWEn7blhJ+25YSftuWEn7blhJ+25YSftuWEn7blhKF2pUS+duWEfsAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADbkxAI25UR99uVEffbkxAIAAAAAAAAAAAAAAAA2ZUSCtqVEvXblhL/25UR99uV
        EffalRH32pUS/9uVEffbkxAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANmVEgralRL125YS/wAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAANqTEAbalRH125UR+9uVEYPblhJ+25YSftuWEn7blRKF2pUS+duW
        Ev0AAAAAAAAAANqTEAbalRH125UR+9uVEYPblhJ+25YSftuWEn7blhJ+25YSftuWEn7blhJ+25UShdqV
        EvnblhL9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANuVEa3blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/2pURrwAAAAAAAAAAAAAAANuVEa3blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9qVEa8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA25URCtuVEWbblhJ+25YSftuW
        En7blhJ+25YSftqVEmbblREKAAAAAAAAAAAAAAAA25URCtuVEWbblhJ+25YSftuWEn7blhJ+25YSftuW
        En7blhJ+25YSftuWEn7alRJm25URCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////gAP/gA/j/j8f8/7/j+P+/4AD/v/
        ///7////+/////v+AA/7/j+P+4B/z/u+P4/7vgAP+7////u////5P///4A4AD+OOP4/nwH/P444/j+AO
        AA////////////////////////////////8=
</value>
  </data>
</root>